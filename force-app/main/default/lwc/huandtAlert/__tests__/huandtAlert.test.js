import { createElement } from 'lwc';
import HuandtAlert from 'c/huandtAlert';

describe('c-huandt-alert', () => {
    afterEach(() => {
        // The jsdom instance is shared across test cases in a single file so reset the DOM
        while (document.body.firstChild) {
            document.body.removeChild(document.body.firstChild);
        }
    });

    it('TODO: test case generated by CLI command, please fill in test logic', () => {
        // Arrange
        const element = createElement('c-huandt-alert', {
            is: HuandtAlert
        });

        // Act
        document.body.appendChild(element);

        // Assert
        expect(element.message).toBeUndefined();
        expect(element.messageIcon).toBeUndefined();
        expect(element.type).toBe('info');
        expect(element.context).toBeUndefined();
        expect(element.show).toBe(false);
        expect(element.variant).toBe('inverse');
        expect(element.alertClass).toBe('slds-notify slds-notify_alert slds-theme_alert-texture slds-theme_info');
    });

    it('sets values based on type in connectedCallback', () => {
        // Arrange
        const element = createElement('c-huandt-alert', {
            is: HuandtAlert
        });
        element.type = 'warning';

        // Act
        document.body.appendChild(element);

        // Assert
        expect(element.messageIcon).toBe('utility:warning');
        expect(element.variant).toBe('none');
        expect(element.alertClass).toBe('slds-notify slds-notify_alert slds-theme_alert-texture slds-theme_warning');
    });

    it('renders message on show in renderedCallback', () => {
        // Arrange
        const element = createElement('c-huandt-alert', {
            is: HuandtAlert
        });
        element.show = true;
        element.message = 'Test Message';

        // Act
        document.body.appendChild(element);

        // Assert
        const messageContainer = element.shadowRoot.querySelector('.message-container');
        expect(messageContainer.innerHTML).toBe('Test Message');
    });

    it('dispatches alertclose event on close', () => {
        // Arrange
        const element = createElement('c-huandt-alert', {
            is: HuandtAlert
        });
        element.show = true;

        const eventListener = jest.fn();
        element.addEventListener('alertclose', eventListener);

        // Act
        element.close();

        // Assert
        expect(element.show).toBe(false);
        expect(eventListener).toHaveBeenCalledWith(expect.objectContaining({
            detail: expect.objectContaining({
                type: 'info', // Assuming default type is 'info'
                context: undefined,
            }),
        }));
    });
});